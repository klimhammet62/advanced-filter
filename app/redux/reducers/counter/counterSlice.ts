import { PayloadAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';



import type { AppState, AppThunk } from '../../store';



import { fetchCount } from './counterAPI';


type TObj = {
	id: number;
	value: number;
	title: string;
};
export interface CounterState {
	obj: TObj[];
	// value: number;
	status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
	obj: [
		{
			id: 1,
			value: 1,
			title: 'zxc',
		},
		{
			id: 2,
			value: 2,
			title: 'cxz',
		},
	],
	status: 'idle'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
	'counter/fetchCount',
	async (amount: number) => {
		const response = await fetchCount(amount);
		// The value we return becomes the `fulfilled` action payload
		return response.data;
	}
);

export const counterSlice = createSlice({
	name: 'counter',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		increment: (state: any) => {
			// Redux Toolkit allows us to write "mutating" logic in reducers. It
			// doesn't actually mutate the state because it uses the Immer library,
			// which detects changes to a "draft state" and produces a brand new
			// immutable state based off those changes
			// state.value += 1;
			// state.obj.value += 1;
			state.obj[0].value += 1;
		},
		decrement: (state: any) => {
			// state.value -= 1;
			// state.obj.value -= 1;
			state.obj[0].value -= 1;
		},
		// Use the PayloadAction type to declare the contents of `action.payload`
		incrementByAmount: (state: any, action: PayloadAction<number>) => {
			// state.obj.value += action.payload;
			state.obj[0].value += action.payload;
		},
		swap: (state: any)=> {
			// let copyState = JSON.parse(JSON.stringify(state));
			// copyState = copyState.map(i => {...i});
			// const newItems = sort() // proxy[];
			// state= copyState
		}
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(incrementAsync.pending, (state) => {
				state.status = 'loading';
			})
			.addCase(incrementAsync.fulfilled, (state, action) => {
				state.status = 'idle';
				// state.obj.value += action.payload;
				state.obj[0].value += action.payload;
			});
	},
});

export const { increment, decrement, incrementByAmount, swap } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: AppState) => state.counter.obj;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
	(amount: number): AppThunk =>
	(dispatch, getState) => {
		const currentValue = selectCount(getState());
		if (currentValue % 2 === 1) {
			dispatch(incrementByAmount(amount));
		}
	};

export default counterSlice.reducer;